#include <stdio.h>
#include <stdlib.h>

#define MAX_QUEUE_SIZE 100

typedef struct {
    int front, rear;
    int items[MAX_QUEUE_SIZE];
} Queue;

// Function prototypes
void enqueue(Queue *q, int value);
int dequeue(Queue *q);
void display(Queue *q);

int main() {
    Queue queue;
    queue.front = -1;
    queue.rear = -1;

    // Example usage
    enqueue(&queue, 10);
    enqueue(&queue, 20);
    enqueue(&queue, 30);
    enqueue(&queue, 40);

    printf("Queue elements: ");
    display(&queue);

    printf("\nDequeued element: %d\n", dequeue(&queue));
    printf("Queue elements after dequeue: ");
    display(&queue);

    return 0;
}

// Function to enqueue an element into the queue
void enqueue(Queue *q, int value) {
    if (q->rear == MAX_QUEUE_SIZE - 1) {
        printf("Queue overflow!\n");
        exit(EXIT_FAILURE);
    }

    if (q->front == -1) {
        q->front = 0;
    }

    q->items[++(q->rear)] = value;
}

// Function to dequeue an element from the queue
int dequeue(Queue *q) {
    if (q->front == -1) {
        printf("Queue underflow!\n");
        exit(EXIT_FAILURE);
    }

    int dequeuedItem = q->items[q->front];
    if (q->front == q->rear) {
        q->front = q->rear = -1;
    } else {
        q->front++;
    }
    return dequeuedItem;
}

// Function to display elements of the queue
void display(Queue *q) {
    if (q->front == -1) {
        printf("Queue is empty\n");
        return;
    }

    for (int i = q->front; i <= q->rear; i++) {
        printf("%d ", q->items[i]);
    }
}
