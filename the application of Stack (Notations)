#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX_STACK_SIZE 100

// Stack structure
typedef struct {
    int top;
    int items[MAX_STACK_SIZE];
} Stack;

// Function prototypes
void push(Stack *s, int value);
int pop(Stack *s);
int evaluatePostfix(char *expression);

int main() {
    char postfixExpression[100];
    printf("Enter a postfix expression: ");
    fgets(postfixExpression, sizeof(postfixExpression), stdin);

    int result = evaluatePostfix(postfixExpression);
    printf("Result: %d\n", result);

    return 0;
}

// Function to push element onto stack
void push(Stack *s, int value) {
    if (s->top == MAX_STACK_SIZE - 1) {
        printf("Stack overflow!\n");
        exit(EXIT_FAILURE);
    }
    s->items[++(s->top)] = value;
}

// Function to pop element from stack
int pop(Stack *s) {
    if (s->top == -1) {
        printf("Stack underflow!\n");
        exit(EXIT_FAILURE);
    }
    return s->items[(s->top)--];
}

// Function to evaluate postfix expression
int evaluatePostfix(char *expression) {
    Stack stack;
    stack.top = -1;

    int i = 0;
    char ch;
    while ((ch = expression[i++]) != '\0') {
        if (isdigit(ch)) {
            push(&stack, ch - '0'); // Convert character to integer and push onto stack
        } else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
            int operand2 = pop(&stack);
            int operand1 = pop(&stack);
            int result;
            switch (ch) {
                case '+':
                    result = operand1 + operand2;
                    break;
                case '-':
                    result = operand1 - operand2;
                    break;
                case '*':
                    result = operand1 * operand2;
                    break;
                case '/':
                    result = operand1 / operand2;
                    break;
            }
            push(&stack, result);
        }
    }
    return pop(&stack); // Return final result
}
